/* Hecho  Parte 3 Acabado
 * File:   Practica5
 * Author: Mateo Carchi
 * Created on 21 de mayo de 2025, 7:51
 */

// PIC18F4550 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1L
#pragma config PLLDIV = 5       // PLL Prescaler Selection bits (Divide by 5 (20 MHz oscillator input))
#pragma config CPUDIV = OSC1_PLL2// System Clock Postscaler Selection bits ([Primary Oscillator Src: /1][96 MHz PLL Src: /2])
#pragma config USBDIV = 1       // USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1) (USB clock source comes directly from the primary oscillator block with no postscale)

// CONFIG1H
#pragma config FOSC = HSPLL_HS  // Oscillator Selection bits (HS oscillator, PLL enabled (HSPLL))
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor disabled)
#pragma config IESO = OFF       // Internal/External Oscillator Switchover bit (Oscillator Switchover mode disabled)

// CONFIG2L
#pragma config PWRT = ON        // Power-up Timer Enable bit (PWRT enabled)
#pragma config BOR = ON         // Brown-out Reset Enable bits (Brown-out Reset enabled in hardware only (SBOREN is disabled))
#pragma config BORV = 3         // Brown-out Reset Voltage bits (Minimum setting 2.05V)
#pragma config VREGEN = OFF     // USB Voltage Regulator Enable bit (USB voltage regulator disabled)

// CONFIG2H
#pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)

// CONFIG3H
#pragma config CCP2MX = ON      // CCP2 MUX bit (CCP2 input/output is multiplexed with RC1)
#pragma config PBADEN = OFF     // PORTB A/D Enable bit (PORTB<4:0> pins are configured as digital I/O on Reset)
#pragma config LPT1OSC = OFF    // Low-Power Timer 1 Oscillator Enable bit (Timer1 configured for higher power operation)
#pragma config MCLRE = ON       // MCLR Pin Enable bit (MCLR pin enabled; RE3 input pin disabled)

// CONFIG4L
#pragma config STVREN = ON      // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config LVP = OFF        // Single-Supply ICSP Enable bit (Single-Supply ICSP disabled)
#pragma config ICPRT = OFF      // Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit (ICPORT disabled)
#pragma config XINST = OFF      // Extended Instruction Set Enable bit (Instruction set extension and Indexed Addressing mode disabled (Legacy mode))

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000800-001FFFh) is not code-protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) is not code-protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) is not code-protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) is not code-protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot block (000000-0007FFh) is not code-protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM is not code-protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000800-001FFFh) is not write-protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) is not write-protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) is not write-protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) is not write-protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) are not write-protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot block (000000-0007FFh) is not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM is not write-protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000800-001FFFh) is not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) is not protected from table reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) is not protected from table reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) is not protected from table reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot block (000000-0007FFh) is not protected from table reads executed in other blocks)

// #pragma config statements should precede project file includes.
// programa que oscila el puerto b


#include <xc.h>
#include "lcd.h"
#define _XTAL_FREQ 48000000

volatile unsigned int ResultadoADC = 0;
volatile unsigned int intervalo = 200;
unsigned char actualizar_led = 0;
void init_ADC(void) {
    ADCON1 = 0x0E;  // AN0 analógico
    ADCON2 = 0b10101010;  // Alineado derecha, Tacq, Fosc/32
    ADCON0 = 0x01;  // Canal 0, ADC ON
}

void init_Timer0(void) {
    T0CON = 0b00000111;  // 16 bit, Fosc/4, prescaler 1:256
    TMR0H = 0xDB;        // Preload 200 ms
    TMR0L = 0x81;
    T0CONbits.TMR0ON = 1;
    INTCONbits.TMR0IE = 1;
    INTCONbits.TMR0IF = 0;
}

void lcd_print_num(unsigned int num) {
    char buf[5];
    buf[4] = '\0';
    buf[3] = (num % 10) + '0'; num /= 10;
    buf[2] = (num % 10) + '0'; num /= 10;
    buf[1] = (num % 10) + '0'; num /= 10;
    buf[0] = (num % 10) + '0';
    lcd_print(buf);
}




void __interrupt() ISR(void) {
    if (INTCONbits.TMR0IF) {
        TMR0H = 0xDB;
        TMR0L = 0x81;

        // Leer ADC
        ADCON0bits.GODONE = 1;
        while (ADCON0bits.GODONE);
        ResultadoADC = ((unsigned int)ADRESH << 8) | ADRESL;


        INTCONbits.TMR0IF = 0;
    }
}


void main(void) {
    TRISDbits.TRISD0 = 0; LATDbits.LATD0 = 0;
    lcd_init();
    init_ADC();

    for (int i = 0; i < 10; i++) {
        LATDbits.LATD0 = 1; __delay_ms(50);
        LATDbits.LATD0 = 0; __delay_ms(50);
    }

    lcd_set_cursor(1,1); lcd_print("Universidad de");
    lcd_set_cursor(2,1); lcd_print("Cuenca");
    __delay_ms(2000);
    lcd_clear();

    lcd_set_cursor(1,1); lcd_print("Termometro 1.0");
    __delay_ms(2000);
    lcd_clear();
    __delay_ms(1000);

    init_Timer0();
    INTCONbits.GIE = 1;
    INTCONbits.PEIE = 1;

    while (1) {


            lcd_set_cursor(1,1);
            lcd_print("ADC = ");
            lcd_print_num(ResultadoADC);

            // Determinar intervalo según el ADC
            if (ResultadoADC <= 256){ 
                intervalo = 200;
                // Parpadear LED con intervalo
                LATDbits.LATD0 = 1; __delay_ms(200);
                LATDbits.LATD0 = 0; __delay_ms(200);
            }
            else if (257 <=ResultadoADC && ResultadoADC <= 512) {
                intervalo = 100;
                // Parpadear LED con intervalo
                LATDbits.LATD0 = 1; __delay_ms(100);
                LATDbits.LATD0 = 0; __delay_ms(100);
            }
            else if (513 <= ResultadoADC && ResultadoADC <= 768)  gey{
                intervalo = 50;
                // Parpadear LED con intervalo
                LATDbits.LATD0 = 1; __delay_ms(50);
                LATDbits.LATD0 = 0; __delay_ms(50);
            }
            else {
                intervalo = 25;
                // Parpadear LED con intervalo
                LATDbits.LATD0 = 1; __delay_ms(25);
                LATDbits.LATD0 = 0; __delay_ms(25);
            }
        }
}
